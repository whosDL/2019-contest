const imgMap = {
  0: 'empty',
  1: 'wall',
  2: 'space',
  3: 'target',
  4: 'box',
  5: 'box_red',
  6: 'worker'
}

// puzzles:
// level 1: 2 boxes
// level 2: 3 boxes
// level 3: 4 boxes
const puzzles = [
[
  [
    ['0','0','0','0','1','1','1','1','1','1','0','0','0','0','0'],
    ['1','1','1','1','1','2','2','2','2','1','1','1','1','1','1'],
    ['1','2','2','2','1','2','2','2','6','2','2','1','2','2','1'],
    ['1','2','2','4','3','2','2','2','2','2','2','3','4','2','1'],
    ['1','1','1','1','2','2','2','2','1','2','2','1','2','2','1'],
    ['0','0','0','1','1','2','2','2','1','2','2','2','2','1','1'],
    ['0','0','0','0','1','1','1','1','1','1','1','1','1','1','0'],
  ],
  [
    ['1','1','1','1','0','0','1','1','1','1'],
    ['1','2','2','1','1','1','1','2','2','1'],
    ['1','2','2','2','2','2','2','2','2','1'],
    ['1','2','2','1','1','1','1','2','2','1'],
    ['1','1','6','1','1','3','2','4','1','1'],
    ['1','2','2','1','3','4','2','2','1','0'],
    ['1','2','2','2','2','2','2','1','1','0'],
    ['1','2','2','1','2','2','1','1','0','0'],
    ['1','1','1','1','1','1','1','0','0','0'],
  ]
],
[
  [
    ['1','1','1','1','1','1','1','1'],
    ['1','1','1','1','1','1','1','1'],
    ['1','1','2','2','3','2','1','1'],
    ['1','1','6','1','2','5','1','1'],
    ['1','1','2','2','4','2','1','1'],
    ['1','1','2','1','5','2','1','1'],
    ['1','1','2','2','2','2','1','1'],
    ['1','1','1','1','1','1','1','1'],
  ],
  [
    ['1','1','1','1','1','1','1','1'],
    ['1','1','6','2','2','2','1','1'],
    ['1','1','1','4','2','2','2','1'],
    ['1','1','1','2','3','2','2','1'],
    ['1','2','4','2','1','4','1','1'],
    ['1','2','3','2','2','3','1','1'],
    ['1','1','1','1','2','2','1','1'],
    ['1','1','1','1','1','1','1','1'],
  ],
],
[
  [
    ['0','1','1','1','1','1','0'],
    ['0','1','2','2','2','1','0'],
    ['0','1','3','1','4','1','1'],
    ['0','1','2','2','2','2','1'],
    ['0','1','3','1','4','2','1'],
    ['0','1','2','2','2','1','1'],
    ['0','1','3','1','4','1','0'],
    ['1','1','2','2','2','1','0'],
    ['1','2','3','1','4','1','0'],
    ['1','2','6','2','2','1','0'],
    ['1','2','2','1','1','1','0'],
    ['1','1','1','1','0','0','0'],
  ],
  [
    ['1','1','1','1','1','1','1','1','1','0'],
    ['1','2','3','6','3','4','3','2','1','0'],
    ['1','2','1','2','4','2','2','2','1','0'],
    ['1','2','1','1','4','1','1','1','1','0'],
    ['1','2','2','2','4','2','2','1','1','0'],
    ['1','1','1','2','3','2','2','2','1','1'],
    ['0','0','1','1','1','2','2','2','2','1'],
    ['0','0','0','0','1','1','2','2','2','1'],
    ['0','0','0','0','0','1','1','1','1','1'],
  ],
],
]

const choosePuzzle = (level, num) => {
  return puzzles[level - 1][num - 1].concat([]).map(x => x.concat([]))
}

const findWorker = (puzzle) => {
  for (let i = 0; i < puzzle.length; i++) {
    for (let j = 0; j < puzzle[i].length; j++) {
      if (puzzle[i][j] === '6') return [i, j]
    }
  }
}

const findNextPos = (wY, wX, direction) => {
  switch (direction) {
    case 'up': return [wY - 1, wX]
    case 'right': return [wY, wX + 1]
    case 'down': return [wY + 1, wX]
    case 'left': return [wY, wX - 1]
  }
}

const handleBoxMove = (ly, lx, ty, tx) => {
  if (puzzles[level - 1][num - 1][ly][lx] === '3') count--
  if (puzzles[level - 1][num - 1][ty][tx] === '3') count++
}

const handleMove = (puzzle, direction) => {
  const [workerY, workerX] = findWorker(puzzle)
  const [tryY, tryX] = findNextPos(workerY, workerX, direction)
  // normal
  if (puzzle[tryY][tryX] === '2' || puzzle[tryY][tryX] === '3' ) {
    puzzle[tryY][tryX] = '6'
    puzzle[workerY][workerX] = puzzles[level - 1][num - 1][workerY][workerX] === '3' ? '3' : '2'
    return true
  }
  // box
  if (puzzle[tryY][tryX] === '4' || puzzle[tryY][tryX] === '5' ) {
    const nextBoxY = 2 * tryY - workerY
    const nextBoxX = 2 * tryX - workerX
    // will only to space or target
    if (puzzle[nextBoxY][nextBoxX] === '2' || puzzle[nextBoxY][nextBoxX] === '3') {
      puzzle[nextBoxY][nextBoxX] = `${+puzzle[nextBoxY][nextBoxX] + 2}`
      puzzle[tryY][tryX] = '6'
      puzzle[workerY][workerX] = puzzles[level - 1][num - 1][workerY][workerX] === '3' ? '3' : '2'
      handleBoxMove(tryY, tryX, nextBoxY, nextBoxX)
      return true
    }
    return false
  }
  // wall
  return false
}
